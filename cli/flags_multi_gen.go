// Code generated by generate_multi_flags.py; DO NOT EDIT.

package cli

import (
	"time"
)

// []bool

func BoolsVar(register Register, p *[]bool, name string, options ...FlagOptionApplyer) error {
	return Var(register, newBoolValues(p), name, options...)
}

func Bools(register Register, name string, options ...FlagOptionApplyer) *[]bool {
	p := new([]bool)
	_ = BoolsVar(register, p, name, options...)
	return p
}

// []uint8

func Uint8sVar(register Register, p *[]uint8, name string, options ...FlagOptionApplyer) error {
	return Var(register, newUint8Values(p), name, options...)
}

func Uint8s(register Register, name string, options ...FlagOptionApplyer) *[]uint8 {
	p := new([]uint8)
	_ = Uint8sVar(register, p, name, options...)
	return p
}

// []uint16

func Uint16sVar(register Register, p *[]uint16, name string, options ...FlagOptionApplyer) error {
	return Var(register, newUint16Values(p), name, options...)
}

func Uint16s(register Register, name string, options ...FlagOptionApplyer) *[]uint16 {
	p := new([]uint16)
	_ = Uint16sVar(register, p, name, options...)
	return p
}

// []uint32

func Uint32sVar(register Register, p *[]uint32, name string, options ...FlagOptionApplyer) error {
	return Var(register, newUint32Values(p), name, options...)
}

func Uint32s(register Register, name string, options ...FlagOptionApplyer) *[]uint32 {
	p := new([]uint32)
	_ = Uint32sVar(register, p, name, options...)
	return p
}

// []uint64

func Uint64sVar(register Register, p *[]uint64, name string, options ...FlagOptionApplyer) error {
	return Var(register, newUint64Values(p), name, options...)
}

func Uint64s(register Register, name string, options ...FlagOptionApplyer) *[]uint64 {
	p := new([]uint64)
	_ = Uint64sVar(register, p, name, options...)
	return p
}

// []int8

func Int8sVar(register Register, p *[]int8, name string, options ...FlagOptionApplyer) error {
	return Var(register, newInt8Values(p), name, options...)
}

func Int8s(register Register, name string, options ...FlagOptionApplyer) *[]int8 {
	p := new([]int8)
	_ = Int8sVar(register, p, name, options...)
	return p
}

// []int16

func Int16sVar(register Register, p *[]int16, name string, options ...FlagOptionApplyer) error {
	return Var(register, newInt16Values(p), name, options...)
}

func Int16s(register Register, name string, options ...FlagOptionApplyer) *[]int16 {
	p := new([]int16)
	_ = Int16sVar(register, p, name, options...)
	return p
}

// []int32

func Int32sVar(register Register, p *[]int32, name string, options ...FlagOptionApplyer) error {
	return Var(register, newInt32Values(p), name, options...)
}

func Int32s(register Register, name string, options ...FlagOptionApplyer) *[]int32 {
	p := new([]int32)
	_ = Int32sVar(register, p, name, options...)
	return p
}

// []int64

func Int64sVar(register Register, p *[]int64, name string, options ...FlagOptionApplyer) error {
	return Var(register, newInt64Values(p), name, options...)
}

func Int64s(register Register, name string, options ...FlagOptionApplyer) *[]int64 {
	p := new([]int64)
	_ = Int64sVar(register, p, name, options...)
	return p
}

// []float32

func Float32sVar(register Register, p *[]float32, name string, options ...FlagOptionApplyer) error {
	return Var(register, newFloat32Values(p), name, options...)
}

func Float32s(register Register, name string, options ...FlagOptionApplyer) *[]float32 {
	p := new([]float32)
	_ = Float32sVar(register, p, name, options...)
	return p
}

// []float64

func Float64sVar(register Register, p *[]float64, name string, options ...FlagOptionApplyer) error {
	return Var(register, newFloat64Values(p), name, options...)
}

func Float64s(register Register, name string, options ...FlagOptionApplyer) *[]float64 {
	p := new([]float64)
	_ = Float64sVar(register, p, name, options...)
	return p
}

// []string

func StringsVar(register Register, p *[]string, name string, options ...FlagOptionApplyer) error {
	return Var(register, newStringValues(p), name, options...)
}

func Strings(register Register, name string, options ...FlagOptionApplyer) *[]string {
	p := new([]string)
	_ = StringsVar(register, p, name, options...)
	return p
}

// []int

func IntsVar(register Register, p *[]int, name string, options ...FlagOptionApplyer) error {
	return Var(register, newIntValues(p), name, options...)
}

func Ints(register Register, name string, options ...FlagOptionApplyer) *[]int {
	p := new([]int)
	_ = IntsVar(register, p, name, options...)
	return p
}

// []uint

func UintsVar(register Register, p *[]uint, name string, options ...FlagOptionApplyer) error {
	return Var(register, newUintValues(p), name, options...)
}

func Uints(register Register, name string, options ...FlagOptionApplyer) *[]uint {
	p := new([]uint)
	_ = UintsVar(register, p, name, options...)
	return p
}

// []time.Duration

func DurationsVar(register Register, p *[]time.Duration, name string, options ...FlagOptionApplyer) error {
	return Var(register, newDurationValues(p), name, options...)
}

func Durations(register Register, name string, options ...FlagOptionApplyer) *[]time.Duration {
	p := new([]time.Duration)
	_ = DurationsVar(register, p, name, options...)
	return p
}
