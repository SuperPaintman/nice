#!/usr/bin/env python

args = [
    ("bool", "Bool"),
    ("uint8", "Uint8"),
    ("uint16", "Uint16"),
    ("uint32", "Uint32"),
    ("uint64", "Uint64"),
    ("int8", "Int8"),
    ("int16", "Int16"),
    ("int32", "Int32"),
    ("int64", "Int64"),
    ("float32", "Float32"),
    ("float64", "Float64"),
    ("string", "String"),
    ("int", "Int"),
    ("uint", "Uint"),
    # TODO: Duration
    # TODO: Func
]

res = "// Code generated by generate_rest.py; DO NOT EDIT.\n"
res += "\n"
res += "package cli\n"

for (typ, name) in args:
    res += "\n"
    res += "// []%s\n" % (typ)
    res += "\n"
    res += "func Rest%ssVar(register Register, p *[]%s, name string, options ...RestOptionApplyer) error {\n" % (name, typ)
    res += "\tvar opts RestOptions\n"
    res += "\topts.applyName(name)\n"
    res += "\topts.applyRestOptions(options)\n"
    res += "\n"
    res += "\treturn register.RegisterRestArgs(newRest(new%sValues(p), opts))\n" % name
    res += "}\n"
    res += "\n"
    res += "func Rest%ss(register Register, name string, options ...RestOptionApplyer) *[]%s {\n" % (name, typ)
    res += "\tp := new([]%s)\n" % typ
    res += "\t_ = Rest%ssVar(register, p, name, options...)\n" % name
    res += "\treturn p\n"
    res += "}\n"

with open("./rest_gen.go", "w") as f:
    f.write(res)
