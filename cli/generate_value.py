#!/usr/bin/env python

from gotypes import types, imports_stringer

res = "// Code generated by generate_value.py; DO NOT EDIT.\n"
res += "\n"
res += "package cli\n"
res += "\n"
res += "import (\n"
for pkg in imports_stringer:
    res += "\t\"%s\"\n" % pkg
res += ")\n"

for (typ, name, stringer) in types:
    res += "\n"
    res += "// %s\n" % typ
    res += "\n"
    res += "var (\n"
    res += "\t_ Value  = (*%sValue)(nil)\n" % typ
    res += "\t_ Getter = (*%sValue)(nil)\n" % typ
    res += "\t_ Typer  = (*%sValue)(nil)\n" % typ
    res += ")\n"
    res += "\n"
    res += "type %sValue %s\n" % (typ, typ)
    res += "\n"
    res += "func new%sValue(p *%s) *%sValue {\n" % (name, typ, typ)
    res += "\treturn (*%sValue)(p)\n" % typ
    res += "}\n"
    res += "\n"
    res += "func (v *%sValue) Get() interface{} { return %s(*v) }\n" % (typ, typ)
    res += "\n"
    res += "func (v *%sValue) String() string { return %s }\n" % (typ, (stringer % "v"))
    res += "\n"
    res += "func (*%sValue) Type() string { return \"%s\" }\n" % (typ, typ)

with open("./value_gen.go", "w") as f:
    f.write(res)
