#!/usr/bin/env python

imports = [
  "strconv"
]

values = [
    ("bool", {"name": "Bool", "stringer": "strconv.FormatBool(bool(*%s))"}),
    # ("uint8", "Uint8"),
    # ("uint16", "Uint16"),
    # ("uint32", "Uint32"),
    # ("uint64", "Uint64"),
    # ("int8", "Int8"),
    # ("int16", "Int16"),
    # ("int32", "Int32"),
    # ("int64", "Int64"),
    # ("float32", "Float32"),
    # ("float64", "Float64"),
    ("string", {"name": "String", "stringer": "string(*%s)"}),
    ("int", {"name": "Int", "stringer": "strconv.Itoa(int(*%s))"}),
    ("uint", {"name": "Uint", "stringer": "strconv.FormatUint(uint64(*%s), 10)"}),
    # TODO: Duration
    # TODO: Func
]

res = "// Code generated by generate_value.py; DO NOT EDIT.\n"
res += "\n"
res += "package cli\n"
res += "\n"
res += "import (\n"
for pkg in imports:
    res += "\t\"%s\"\n" % pkg
res += ")\n"

for (typ, options) in values:
    name = options["name"]
    stringer = options["stringer"]

    res += "\n"
    res += "// %s\n" % (typ)
    res += "\n"
    res += "var (\n"
    res += "\t_ Value  = (*%sValue)(nil)\n" % typ
    res += "\t_ Getter = (*%sValue)(nil)\n" % typ
    res += "\t_ Typer  = (*%sValue)(nil)\n" % typ
    res += ")\n"
    res += "\n"
    res += "type %sValue %s\n" % (typ, typ)
    res += "\n"
    res += "func new%sValue(p *%s) *%sValue {\n" % (name, typ, typ)
    res += "\treturn (*%sValue)(p)\n" % typ
    res += "}\n"
    res += "\n"
    res += "func (v *%sValue) Get() interface{} { return %s(*v) }\n" % (typ, typ)
    res += "\n"
    res += "func (v *%sValue) String() string { return %s }\n" % (typ, (stringer % "v"))
    res += "\n"
    res += "func (*%sValue) Type() string { return \"%s\" }\n" % (typ, typ)

with open("./value_gen.go", "w") as f:
    f.write(res)
