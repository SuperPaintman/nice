#!/usr/bin/env python

from gotypes import types

imports = [
    "strings"
]

res = "// Code generated by generate_values.py; DO NOT EDIT.\n"
res += "\n"
res += "package cli\n"
res += "\n"
res += "import (\n"
for pkg in imports:
    res += "\t\"%s\"\n" % pkg
res += ")\n"

for (typ, name, _) in types:
    res += "\n"
    res += "// []%s\n" % typ
    res += "\n"
    res += "var (\n"
    res += "\t_ Value  = (*%sValues)(nil)\n" % typ
    res += "\t_ Getter = (*%sValues)(nil)\n" % typ
    res += "\t_ Typer  = (*%sValues)(nil)\n" % typ
    res += ")\n"
    res += "\n"
    res += "type %sValues []%s\n" % (typ, typ)
    res += "\n"
    res += "func new%sValues(p *[]%s) *%sValues {\n" % (name, typ, typ)
    res += "\treturn (*%sValues)(p)\n" % typ
    res += "}\n"
    res += "\n"
    res += "func (vs *%sValues) Set(val string) error {\n" % typ
    res += "\trest := val\n"
    res += "\tfor rest != \"\" {\n"
    res += "\t\tidx := strings.IndexByte(rest, ',')\n"
    res += "\t\tif idx != -1 {\n"
    res += "\t\t\tval = rest[:idx]\n"
    res += "\t\t\trest = rest[idx+1:]\n"
    res += "\t\t} else {\n"
    res += "\t\t\tval = rest\n"
    res += "\t\t\trest = \"\"\n"
    res += "\t\t}\n"
    res += "\n"
    res += "\t\tvar def %s\n" % typ
    res += "\t\t*vs = append(*vs, def)\n"
    res += "\t\tif err := (*%sValue)(&(*vs)[len(*vs)-1]).Set(val); err != nil {\n" % typ
    res += "\t\t\treturn err\n"
    res += "\t\t}\n"
    res += "\t}\n"
    res += "\n"
    res += "\treturn nil\n"
    res += "}\n"
    res += "\n"
    res += "func (vs *%sValues) String() string {\n" % typ
    res += "\tif len(*vs) == 0 {\n"
    res += "\t\treturn \"\"\n"
    res += "\t}\n"
    res += "\n"
    res += "\tvar buf strings.Builder\n"
    res += "\t_, _ = buf.WriteString((*%sValue)(&(*vs)[0]).String())\n" % typ
    res += "\n"
    res += "\tfor i := 1; i < len(*vs); i++ {\n"
    res += "\t\t_ = buf.WriteByte(',')\n"
    res += "\t\t_, _ = buf.WriteString((*%sValue)(&(*vs)[i]).String())\n" % typ
    res += "\t}\n"
    res += "\n"
    res += "\treturn buf.String()\n"
    res += "}\n"
    res += "\n"
    res += "func (v *%sValues) Get() interface{} { return []%s(*v) }\n" % (typ, typ)
    res += "\n"
    res += "func (*%sValues) Type() string { return \"[]%s\" }\n" % (typ, typ)

with open("./values_gen.go", "w") as f:
    f.write(res)
