// Code generated by generate_args.py; DO NOT EDIT.

package cli

// bool

func BoolArgVar(register Register, p *bool, name string, options ...ArgOptionApplyer) error {
	var opts ArgOptions
	opts.applyName(name)
	opts.applyArgOptions(options)

	return register.RegisterArg(newArg(newBoolValue(p), opts))
}

func BoolArg(register Register, name string, options ...ArgOptionApplyer) *bool {
	p := new(bool)
	_ = BoolArgVar(register, p, name, options...)
	return p
}

// string

func StringArgVar(register Register, p *string, name string, options ...ArgOptionApplyer) error {
	var opts ArgOptions
	opts.applyName(name)
	opts.applyArgOptions(options)

	return register.RegisterArg(newArg(newStringValue(p), opts))
}

func StringArg(register Register, name string, options ...ArgOptionApplyer) *string {
	p := new(string)
	_ = StringArgVar(register, p, name, options...)
	return p
}

// int

func IntArgVar(register Register, p *int, name string, options ...ArgOptionApplyer) error {
	var opts ArgOptions
	opts.applyName(name)
	opts.applyArgOptions(options)

	return register.RegisterArg(newArg(newIntValue(p), opts))
}

func IntArg(register Register, name string, options ...ArgOptionApplyer) *int {
	p := new(int)
	_ = IntArgVar(register, p, name, options...)
	return p
}
