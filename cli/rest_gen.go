// Code generated by generate_rest.py; DO NOT EDIT.

package cli

import (
	"time"
)

// []bool

func RestBoolsVar(register Register, p *[]bool, name string, options ...RestOptionApplyer) error {
	return RestVar(register, newBoolValues(p), name, options...)
}

func RestBools(register Register, name string, options ...RestOptionApplyer) *[]bool {
	p := new([]bool)
	_ = RestBoolsVar(register, p, name, options...)
	return p
}

// []uint8

func RestUint8sVar(register Register, p *[]uint8, name string, options ...RestOptionApplyer) error {
	return RestVar(register, newUint8Values(p), name, options...)
}

func RestUint8s(register Register, name string, options ...RestOptionApplyer) *[]uint8 {
	p := new([]uint8)
	_ = RestUint8sVar(register, p, name, options...)
	return p
}

// []uint16

func RestUint16sVar(register Register, p *[]uint16, name string, options ...RestOptionApplyer) error {
	return RestVar(register, newUint16Values(p), name, options...)
}

func RestUint16s(register Register, name string, options ...RestOptionApplyer) *[]uint16 {
	p := new([]uint16)
	_ = RestUint16sVar(register, p, name, options...)
	return p
}

// []uint32

func RestUint32sVar(register Register, p *[]uint32, name string, options ...RestOptionApplyer) error {
	return RestVar(register, newUint32Values(p), name, options...)
}

func RestUint32s(register Register, name string, options ...RestOptionApplyer) *[]uint32 {
	p := new([]uint32)
	_ = RestUint32sVar(register, p, name, options...)
	return p
}

// []uint64

func RestUint64sVar(register Register, p *[]uint64, name string, options ...RestOptionApplyer) error {
	return RestVar(register, newUint64Values(p), name, options...)
}

func RestUint64s(register Register, name string, options ...RestOptionApplyer) *[]uint64 {
	p := new([]uint64)
	_ = RestUint64sVar(register, p, name, options...)
	return p
}

// []int8

func RestInt8sVar(register Register, p *[]int8, name string, options ...RestOptionApplyer) error {
	return RestVar(register, newInt8Values(p), name, options...)
}

func RestInt8s(register Register, name string, options ...RestOptionApplyer) *[]int8 {
	p := new([]int8)
	_ = RestInt8sVar(register, p, name, options...)
	return p
}

// []int16

func RestInt16sVar(register Register, p *[]int16, name string, options ...RestOptionApplyer) error {
	return RestVar(register, newInt16Values(p), name, options...)
}

func RestInt16s(register Register, name string, options ...RestOptionApplyer) *[]int16 {
	p := new([]int16)
	_ = RestInt16sVar(register, p, name, options...)
	return p
}

// []int32

func RestInt32sVar(register Register, p *[]int32, name string, options ...RestOptionApplyer) error {
	return RestVar(register, newInt32Values(p), name, options...)
}

func RestInt32s(register Register, name string, options ...RestOptionApplyer) *[]int32 {
	p := new([]int32)
	_ = RestInt32sVar(register, p, name, options...)
	return p
}

// []int64

func RestInt64sVar(register Register, p *[]int64, name string, options ...RestOptionApplyer) error {
	return RestVar(register, newInt64Values(p), name, options...)
}

func RestInt64s(register Register, name string, options ...RestOptionApplyer) *[]int64 {
	p := new([]int64)
	_ = RestInt64sVar(register, p, name, options...)
	return p
}

// []float32

func RestFloat32sVar(register Register, p *[]float32, name string, options ...RestOptionApplyer) error {
	return RestVar(register, newFloat32Values(p), name, options...)
}

func RestFloat32s(register Register, name string, options ...RestOptionApplyer) *[]float32 {
	p := new([]float32)
	_ = RestFloat32sVar(register, p, name, options...)
	return p
}

// []float64

func RestFloat64sVar(register Register, p *[]float64, name string, options ...RestOptionApplyer) error {
	return RestVar(register, newFloat64Values(p), name, options...)
}

func RestFloat64s(register Register, name string, options ...RestOptionApplyer) *[]float64 {
	p := new([]float64)
	_ = RestFloat64sVar(register, p, name, options...)
	return p
}

// []string

func RestStringsVar(register Register, p *[]string, name string, options ...RestOptionApplyer) error {
	return RestVar(register, newStringValues(p), name, options...)
}

func RestStrings(register Register, name string, options ...RestOptionApplyer) *[]string {
	p := new([]string)
	_ = RestStringsVar(register, p, name, options...)
	return p
}

// []int

func RestIntsVar(register Register, p *[]int, name string, options ...RestOptionApplyer) error {
	return RestVar(register, newIntValues(p), name, options...)
}

func RestInts(register Register, name string, options ...RestOptionApplyer) *[]int {
	p := new([]int)
	_ = RestIntsVar(register, p, name, options...)
	return p
}

// []uint

func RestUintsVar(register Register, p *[]uint, name string, options ...RestOptionApplyer) error {
	return RestVar(register, newUintValues(p), name, options...)
}

func RestUints(register Register, name string, options ...RestOptionApplyer) *[]uint {
	p := new([]uint)
	_ = RestUintsVar(register, p, name, options...)
	return p
}

// []time.Duration

func RestDurationsVar(register Register, p *[]time.Duration, name string, options ...RestOptionApplyer) error {
	return RestVar(register, newDurationValues(p), name, options...)
}

func RestDurations(register Register, name string, options ...RestOptionApplyer) *[]time.Duration {
	p := new([]time.Duration)
	_ = RestDurationsVar(register, p, name, options...)
	return p
}
