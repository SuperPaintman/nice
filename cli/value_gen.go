// Code generated by generate_value.py; DO NOT EDIT.

package cli

import (
	"strconv"
)

// bool

var (
	_ Value  = (*boolValue)(nil)
	_ Getter = (*boolValue)(nil)
	_ Typer  = (*boolValue)(nil)
)

type boolValue bool

func newBoolValue(p *bool) *boolValue {
	return (*boolValue)(p)
}

func (v *boolValue) Get() interface{} { return bool(*v) }

func (v *boolValue) String() string { return strconv.FormatBool(bool(*v)) }

func (*boolValue) Type() string { return "bool" }

// string

var (
	_ Value  = (*stringValue)(nil)
	_ Getter = (*stringValue)(nil)
	_ Typer  = (*stringValue)(nil)
)

type stringValue string

func newStringValue(p *string) *stringValue {
	return (*stringValue)(p)
}

func (v *stringValue) Get() interface{} { return string(*v) }

func (v *stringValue) String() string { return string(*v) }

func (*stringValue) Type() string { return "string" }

// int

var (
	_ Value  = (*intValue)(nil)
	_ Getter = (*intValue)(nil)
	_ Typer  = (*intValue)(nil)
)

type intValue int

func newIntValue(p *int) *intValue {
	return (*intValue)(p)
}

func (v *intValue) Get() interface{} { return int(*v) }

func (v *intValue) String() string { return strconv.Itoa(int(*v)) }

func (*intValue) Type() string { return "int" }

// uint

var (
	_ Value  = (*uintValue)(nil)
	_ Getter = (*uintValue)(nil)
	_ Typer  = (*uintValue)(nil)
)

type uintValue uint

func newUintValue(p *uint) *uintValue {
	return (*uintValue)(p)
}

func (v *uintValue) Get() interface{} { return uint(*v) }

func (v *uintValue) String() string { return strconv.FormatUint(uint64(*v), 10) }

func (*uintValue) Type() string { return "uint" }
