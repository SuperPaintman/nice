package cli

import "io"

type CompletionGenerator interface {
	CompletionGenerate(ctx Context, w io.Writer) error
}

type CompletionGeneratorFunc func(ctx Context, w io.Writer) error

func (fn CompletionGeneratorFunc) CompletionGenerate(ctx Context, w io.Writer) error {
	return fn(ctx, w)
}

func ZSHCompletion() CompletionGenerator {
	return CompletionGeneratorFunc(func(ctx Context, w io.Writer) error {
		ew := easyWriter{w: w}

		app := ctx.App()
		name := app.Name

		ew.Writef("#compdef _%[1]s %[1]s\n", name)
		ew.Writef("\n")
		ew.Writef("#\n")
		ew.Writef("# Code generated by %s; DO NOT EDIT.\n", name)
		ew.Writef("#\n")
		ew.Writef("\n")
		ew.Writef("# zsh completion for %s\n", name)

		if err := ew.Err(); err != nil {
			return err
		}

		return nil
	})
}
